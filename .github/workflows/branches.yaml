name: Vérifier si une issue au statut ouvert, ayant le label "RELEASE_NOTE" existe
on:
  push:
    branches:
      - 'NAVBP-*'
jobs:
  check-release-note-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
        
      - name: Get all open issues with label "RELEASE_NOTE"
        id: get_issues
        run: |
          response=$(curl --location --request GET 'https://api.github.com/repos/gillesbandza-pr/testrelease/issues?state=open&labels=RELEASE_NOTE&per_page=100&page=1' \
          --header 'Authorization: Bearer ${{ secrets.PGH_TOKEN }}' \
          --header 'Content-Type: application/json')
          response_string=$(echo "$response" | jq -c .)
          echo $response_string
          first_result=$(echo "$response" | jq '.[0]')
          echo "Premier résultat : $first_result"
          number_of_first_result=$(echo "$first_result" | jq '.number')
          echo "Number du premier résultat : $number_of_first_result"
          body_of_first_result=$(echo "$first_result" | jq '.body')
          echo "Number du premier résultat : $body_of_first_result"
          number_of_results=$(echo "$response" | jq '. | length')
          echo "Number of results : $number_of_results"
          echo "response=$number_of_results" >> $GITHUB_OUTPUT
          echo "issue_number=$number_of_first_result" >> $GITHUB_OUTPUT
          echo "issue_body=$body_of_first_result" >> $GITHUB_OUTPUT
          
      - name: Display number of issues found
        run: |
          echo "Number of issues found: ${{ steps.get_issues.outputs.response }}"

      - name: Create Release-Backlog issue if no open issue exists
        if: steps.get_issues.outputs.response == 0
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PGH_TOKEN }}
          script: |
            await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Release-Backlog',
              labels: ['RELEASE_NOTE'],
              assignees: [context.actor],
              body: 'This is a new release backlog issue.'
            });
            
      - name: Update existing issue with branch name if it exists
        if: steps.get_issues.outputs.response > 0
        run: |
          branch_name=${GITHUB_REF##refs/heads/}
          echo $branch_name
          response=$(curl --location --request PATCH 'https://api.github.com/repos/gillesbandza-pr/testrelease/issues/${{ steps.get_issues.outputs.issue_number }}' \
          --header 'Authorization: Bearer ${{ secrets.PGH_TOKEN }}' \
          --header 'Content-Type: text/plain' \
          --data '{
            "body": "'${{ steps.get_issues.outputs.issue_body }}' UPDATED FROM GHA - Branch: '$branch_name' / "
          }')

